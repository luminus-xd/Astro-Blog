---
import { db, Like, eq } from 'astro:db';

type Props = {
    articleId: string;
};

const { articleId } = Astro.props;

const likes = await db.select().from(Like).where(eq(Like.articleId, articleId));
const likesCount = likes.length;
---

<>
    <div class="like">
        <button id="like-btn" data-article-id={articleId} type="button" hidden="hidden" title="„ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥">
            <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 48 48"
                ><defs
                    ><mask id="ipTLike0"
                        ><path
                            class="mask"
                            fill="#555"
                            stroke="#fff"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="4"
                            d="M15 8C8.925 8 4 12.925 4 19c0 11 13 21 20 23.326C31 40 44 30 44 19c0-6.075-4.925-11-11-11c-3.72 0-7.01 1.847-9 4.674A10.987 10.987 0 0 0 15 8"></path></mask
                    ></defs
                ><path class="outline" fill="blue" d="M0 0h48v48H0z" mask="url(#ipTLike0)"></path></svg
            >
            <span class="like-count" id="like-span">{likesCount}</span>
        </button>
        <div class="balloon-left">
            <p>
                <span> „Åì„Åì„Åæ„ÅßË™≠„Çì„Åß„Åè„Çå„Å¶„ÅÇ„Çä„Åå„Å®„ÅÜ„ÄÇ</span>
                <span>„ÅÑ„ÅÑÊÑü„Åò„Å†„Å£„Åü„Çâ‚ô•Êäº„Åó„Å¶„Åø„Å¶„Å≠ÔºÅ</span>
            </p>
        </div>
    </div>
</>

<script>
    import JSConfetti from 'js-confetti';

    document.addEventListener('astro:page-load', () => {
        const likeBtn = document.querySelector('#like-btn') as HTMLButtonElement;
        const likeText = document.querySelector('#like-span');

        if (!likeBtn || !likeText) {
            return;
        }
        setTimeout(() => {
            likeBtn.removeAttribute('hidden');
        }, 300);

        /**
         * Ë®ò‰∫ãID
         */
        const id = likeBtn.dataset.articleId;

        if (!id) {
            return;
        }

        if (id) {
            const isLiked = localStorage.getItem(id);
            if (isLiked) {
                likeBtn.disabled = true;
            }

            likeBtn.addEventListener('click', async () => {
                likeBtn.disabled = true;
                if (likeText && likeText.textContent) {
                    likeText.textContent = (parseInt(likeText.textContent, 10) + 1).toString();
                }

                const jsConfetti = new JSConfetti();

                jsConfetti
                    .addConfetti({
                        emojis: ['üëè', '‚ú®', 'üíñ', 'üíé', 'üç≠'],
                    })
                    .then(() => jsConfetti.clearCanvas());

                try {
                    const req = await fetch('/api/addLike.json', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            articleId: id,
                        }),
                    });

                    // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´„ÅÑ„ÅÑ„Å≠„ÅÆÁä∂ÊÖã„Çí‰øùÂ≠ò
                    localStorage.setItem(id, 'true');
                } catch (e) {
                    console.error(e);
                }
            });
        }
    });
</script>

<style>
    button {
        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
        flex-shrink: 0;
        /* width: 100%; */
        color: var(--color-text-main);
        background-color: var(--color-bg-main);
        border: none;
        cursor: pointer;
        padding: 0;
        appearance: none;
        justify-content: center;
        align-items: center;
        line-height: 1;
        gap: 8px;
        border-radius: 30px;
        font-size: 1.6em;
        font-family: var(--font-family-primary);
        font-weight: bold;
        transition:
            color 300ms ease,
            background-color 300ms ease,
            opacity 500ms ease;
    }
    button svg {
        transform: scale(1.4);
    }
    button svg .mask {
        fill: #555;
    }
    button svg .outline {
        transition: fill 300ms ease;
        fill: var(--color-like);
    }
    button[hidden='hidden'] {
        opacity: 300ms;
        visibility: hidden;
        pointer-events: none;
    }
    button:disabled {
        opacity: 0.6;
    }
    button:disabled svg .mask {
        fill: #fff;
    }
    .like {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: 32px;
        margin-top: 3em;
    }
    .like-count {
        font-size: 0.72em;
    }
    .balloon-left {
        position: relative;
        display: inline-block;
        padding: 7px 10px;
        min-width: 120px;
        max-width: 100%;
        color: var(--color-text-main);
        background: var(--color-bg-main);
        border: solid 3px var(--color-text-main);
        box-sizing: border-box;
        border-radius: 11px;
    }
    .balloon-left:before {
        content: '';
        position: absolute;
        top: 50%;
        left: -24px;
        margin-top: -12px;
        border: 12px solid transparent;
        border-right: 12px solid var(--color-bg-main);
        z-index: 2;
    }
    .balloon-left:after {
        content: '';
        position: absolute;
        top: 50%;
        left: -30px;
        margin-top: -14px;
        border: 14px solid transparent;
        border-right: 14px solid var(--color-text-main);
        z-index: 1;
    }
    .balloon-left p {
        margin: 0;
        padding: 0;
    }
    .balloon-left p span {
        display: block;
    }
    @media (max-width: 640px) {
        .balloon-left {
            font-size: 1.4rem;
        }
    }
</style>
